[{"C:\\Projet\\haum-project\\src\\index.jsx":"1","C:\\Projet\\haum-project\\src\\DialogContext.js":"2","C:\\Projet\\haum-project\\src\\serviceWorker.js":"3","C:\\Projet\\haum-project\\src\\App.jsx":"4","C:\\Projet\\haum-project\\src\\services\\meteo.js":"5","C:\\Projet\\haum-project\\src\\components\\Dialog.jsx":"6","C:\\Projet\\haum-project\\src\\components\\info\\Projectinfo.jsx":"7","C:\\Projet\\haum-project\\src\\components\\DialogMeteo.jsx":"8","C:\\Projet\\haum-project\\src\\components\\ActionButton.jsx":"9","C:\\Projet\\haum-project\\src\\components\\animation.js":"10"},{"size":599,"mtime":1659162522601,"results":"11","hashOfConfig":"12"},{"size":2413,"mtime":1659161928885,"results":"13","hashOfConfig":"12"},{"size":5227,"mtime":1659161928889,"results":"14","hashOfConfig":"12"},{"size":3595,"mtime":1659161928885,"results":"15","hashOfConfig":"12"},{"size":829,"mtime":1659161928890,"results":"16","hashOfConfig":"12"},{"size":5285,"mtime":1659161928887,"results":"17","hashOfConfig":"12"},{"size":1301,"mtime":1659162452579,"results":"18","hashOfConfig":"12"},{"size":2837,"mtime":1659162506615,"results":"19","hashOfConfig":"12"},{"size":754,"mtime":1659161928886,"results":"20","hashOfConfig":"12"},{"size":436,"mtime":1659161928888,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"iq2m2y",{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"24"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"24"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"24"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},"C:\\Projet\\haum-project\\src\\index.jsx",[],["48","49"],"C:\\Projet\\haum-project\\src\\DialogContext.js",["50"],"import React, { createContext, useState } from \"react\";\r\nimport { getMeteoForCity, getMeteoForCityFake } from \"./services/meteo\";\r\nimport {useSpeechSynthesis} from \"react-speech-kit\"\r\nexport const DialogContext = createContext();\r\n\r\nconst initialState = {\r\n    dialogs: [\r\n        { msg: \"En quoi puis-je vous aider aujourd'hui?\", id: 0, user: false },\r\n    ],\r\n    city: [\"Antananarivo\", \"Mahajanga\", \"Paris\"],\r\n};\r\nexport const DialogProvider = ({ children }) => {\r\n    const [dialogs, setDialogs] = useState(initialState.dialogs);\r\n    const [loading, setLoading] = useState(false);\r\n    const [meteoDialog, setMeteo] = useState(false);\r\n    const {speak} = useSpeechSynthesis();\r\n    const getMeteo = async (city, msg = \"\") => {\r\n        console.log(\"city \", city);\r\n        setLoading(true);\r\n        closeMeteo();\r\n\r\n        try {\r\n            const response = await getMeteoForCityFake(city);\r\n            const data = response;\r\n            console.log(\"response\", data);\r\n            replyUser(\r\n                `Meteo à ${data.name}: \r\n                Température ${Math.floor(data.main.temp)}° C,  ${\r\n                    data.weather[0].description\r\n                }`\r\n            );\r\n            setLoading(false);\r\n            return response;\r\n        } catch (error) {\r\n            setLoading(false);\r\n            console.error(error);\r\n        }\r\n    };\r\n    const askForMeteo = () => {\r\n        setMeteo(true);\r\n    };\r\n    const closeMeteo = () => {\r\n        setMeteo(false);\r\n    };\r\n    const pushMessage = (msg = \"\", user = true) => {\r\n        setDialogs((prevState)=>[...prevState, { msg, id: prevState.length, user }]);\r\n    };\r\n    const sendRequest = (msg = \"\") => {\r\n        if (msg.length <= 0) return;\r\n        pushMessage(msg);\r\n    };\r\n    const replyUser = (msg = \"\") => {\r\n        if (msg.length <= 0) return;\r\n        speak({\r\n            text:msg\r\n        })\r\n        pushMessage(msg, false);\r\n    };\r\n    return (\r\n        <DialogContext.Provider\r\n            value={{\r\n                sendRequest,\r\n                id: dialogs.length,\r\n                dialogs,\r\n                city: initialState.city,\r\n                getMeteo,\r\n                meteoDialog,\r\n                askForMeteo,\r\n                replyUser,\r\n                closeMeteo,\r\n                loading,\r\n            }}\r\n        >\r\n            {children}\r\n        </DialogContext.Provider>\r\n    );\r\n};\r\n","C:\\Projet\\haum-project\\src\\serviceWorker.js",[],"C:\\Projet\\haum-project\\src\\App.jsx",["51","52"],"import React, { useState, useLayoutEffect } from \"react\";\r\nimport {css} from \"@emotion/css\";\r\nimport {motion} from \"framer-motion\";\r\nimport {Dialog} from \"./components/Dialog\";\r\nimport Projectinfo from \"./components/info/Projectinfo\";\r\nimport style from \"./assets/App.module.css\";\r\n\r\n// 7 SEGMENT\r\nimport SevenSegmentDisplay from 'seven-segment-display';\r\n\r\nconst setTime =  number => number < 10 ? \"0\"+number : number\r\n\r\n\r\nfunction App() {\r\n    let newDate = new Date();\r\n    const [info,setInfo] = useState(false) \r\n    const [datehour,setDateHour] = useState({\r\n        jour: newDate.getDate(),\r\n        mois: newDate.getMonth() + 1,\r\n        année: newDate.getFullYear(),\r\n        heure: newDate.getHours(),\r\n        minutes: newDate.getMinutes(),\r\n        seconds: newDate.getSeconds(),\r\n    });\r\n\r\n    useLayoutEffect(()=> {\r\n        setTimeout(() => {\r\n            newDate = new Date()\r\n            setDateHour({\r\n                jour: setTime(newDate.getDate()),\r\n                mois: setTime(newDate.getMonth() + 1) ,\r\n                année: setTime(newDate.getFullYear()),\r\n                heure: setTime(newDate.getHours()),\r\n                minutes: setTime(newDate.getMinutes()),\r\n                seconds: setTime(newDate.getSeconds())\r\n            })\r\n        },1000)\r\n    },[datehour])\r\n\r\n    const showInfo = () => {setInfo(i => !i)}\r\n    \r\n    return (\r\n        <div style={{display:\"flex\",flexDirection:\"row\"}}>\r\n            <div\r\n                className={\"container\"}\r\n                style={{minHeight: \"100vh\"}}\r\n            >\r\n                <div className=\"row\">\r\n\r\n                    <div\r\n                        className={\"text-white col-sm-12 col-md-6 \"}\r\n                        style={{marginTop:\"80px\"}}\r\n                    >\r\n                        <motion.h1\r\n                            style={{fontSize:\"4.5em\"}}\r\n                            className={\"text-right\"}\r\n                            initial={{ opacity: 0, y: -80 }}\r\n                            animate={{ opacity: 1, y: 0 }}\r\n                            transition={{ duration: 0.5 }}\r\n                        >\r\n                            Je suis <span className={\"text-danger\"}>HAUM</span> votre assistant\r\n                        </motion.h1>\r\n                        <p className={\"text-right mt-4\"} style={{fontSize:\"3em\"}}>\r\n                            {datehour.jour} / {datehour.mois} / {datehour.année}\r\n                        </p>\r\n                        <p className={`text-right mt-4 ${style.digit}`}  style={{height:\"100px\",fontSize:\"3em\"}}>\r\n                            <SevenSegmentDisplay color={\"#FFF\"}  digitCount={2} value={datehour.heure}/>:<SevenSegmentDisplay color={\"#FFF\"} value={datehour.minutes} digitCount={2}/>:<SevenSegmentDisplay color={\"#FFF\"} value={datehour.seconds} digitCount={2}/>\r\n                        </p>\r\n                        <div className=\"row\">\r\n                            <button className=\"btn btn-light\" onClick={() => showInfo()} style={{marginLeft:\"auto\"}}>\r\n                                {!info ? \"En savoir plus\" : \"Fermer\" }\r\n                            </button>    \r\n                        </div>\r\n                        \r\n                    </div>\r\n                    <div\r\n                        className={\"text-white col-sm-12 col-md-6\"}\r\n                        style={{marginTop:\"80px\"}}\r\n                    >\r\n                        <Dialog />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <Projectinfo info={info}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","C:\\Projet\\haum-project\\src\\services\\meteo.js",[],"C:\\Projet\\haum-project\\src\\components\\Dialog.jsx",["53","54"],"import React, { useContext,  useEffect,  useRef } from \"react\";\r\nimport { DialogContext } from \"../DialogContext\";\r\nimport { AnimatePresence, motion } from \"framer-motion\";\r\nimport { css } from \"@emotion/css\";\r\nimport DialogMeteo from \"./DialogMeteo\";\r\nimport SpeechRecognition, {\r\n    useSpeechRecognition,\r\n} from \"react-speech-recognition\";\r\n\r\nconst Msg = ({ children, user = true }) => {\r\n    return (\r\n        <motion.p\r\n            className={css({\r\n                margin: \"10px 0\",\r\n                fontSize: 32,\r\n                paddingBottom: 10,\r\n                textAlign: user ? \"right\" : \"left\",\r\n            })}\r\n            initial={{ opacity: 0, y: \"80px\" }}\r\n            animate={{ opacity: 1, y: 0 }}\r\n            exit={{ opacity: 0, y: \"-80px\" }}\r\n            transition={{ duration: 0.5 }}\r\n        >\r\n            {children}\r\n        </motion.p>\r\n    );\r\n};\r\n\r\nexport const Dialog = () => {\r\n    const { dialogs, sendRequest, getMeteo,id, loading,replyUser } = useContext(DialogContext);\r\n    const inp = useRef(null);\r\n    const onClick = (e) => {\r\n        sendRequest(inp.current.value);\r\n        replyUser(\"hello\")\r\n        inp.current.value = null;\r\n    };\r\n    const commands = [\r\n        {\r\n            command: \"*\",\r\n            callback: (standard) => {\r\n                console.log('standard'+ standard);\r\n            }\r\n        },\r\n        {\r\n            command: \"Salut\",\r\n            callback: ({command}) => {\r\n                console.log('command', command)\r\n            },\r\n        },\r\n        {\r\n            command: \"Je voudrais savoir la météo * *\",\r\n            callback: (pronom,city,{command,finalTranscript}) => {\r\n                getMeteo(city);\r\n                console.log('command', command)\r\n            },\r\n        },\r\n    ];\r\n    \r\n    if (!SpeechRecognition.browserSupportsSpeechRecognition()) {console.log(\"browser is not supporting\")}\r\n\r\n\r\n    const { transcript, listening,finalTranscript } = useSpeechRecognition({\r\n        language: \"fr-FR\",\r\n        commands})\r\n    useEffect(()=>{\r\n        const msg = finalTranscript;\r\n        console.log('finalTranscript' + finalTranscript)\r\n        sendRequest(finalTranscript);\r\n    },[finalTranscript])\r\n    return (\r\n        <>\r\n            <AnimatePresence>\r\n                {dialogs.slice(id<4?0:id-3).map((value) => (\r\n                    <motion.p\r\n                        className={css({\r\n                            margin: \"10px 0\",\r\n                            fontSize: 32,\r\n                            paddingBottom: 10,\r\n                            textAlign: value.user ? \"right\" : \"left\",\r\n                        })}\r\n                        initial={{ opacity: 0, y: \"80px\" }}\r\n                        animate={{ opacity: 1, y: 0 }}\r\n                        exit={{ opacity: 0, y: \"-80px\" }}\r\n                        transition={{ duration: 0.5 }}\r\n                        key={value.id}\r\n                    >\r\n                        {value.msg}\r\n                    </motion.p>\r\n                ))}\r\n                {loading && <Msg key={\"im-searching\"} user={false}>Je cherche...</Msg>}\r\n                {listening && <Msg key={\"im-listening\"} user={false}>Je vous écoute</Msg>}\r\n                {listening && <Msg key={\"transcripting\"}>{transcript}</Msg>}\r\n            </AnimatePresence>\r\n            <div className={css({ margin: 10 })}>\r\n                <div className=\"row no-gutters\">\r\n                    <div className=\"col-sm-12 mb-2\">\r\n                        <input\r\n                            type=\"text\"\r\n                            ref={inp}\r\n                            id={\"meteo\"}\r\n                            className={\"form-control\"}\r\n                            placeholder={\"Demander de l'aide ...\"}\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-xs-4 col-sm-4 mb-4 mt-2\">\r\n                        <button className={\"btn btn-success btn-block\"}\r\n                                onClick={onClick}\r\n                                style={{borderTopRightRadius:\"0\",borderBottomRightRadius:\"0\"}}\r\n                        >Envoyer</button>\r\n\r\n                    </div>\r\n                    <div className=\"col-xs-4 col-sm-4 mb-4 mt-2\">\r\n                        <button\r\n                            className={\"btn btn-info btn-block\"}\r\n                            style={{borderRadius:\"0\"}}\r\n                            onClick={async () => {\r\n                                await SpeechRecognition.startListening({ language: \"fr-FR\" });\r\n                              console.log(\"Micros on\")\r\n                            }}\r\n                        >\r\n                            Ecouter\r\n                        </button>\r\n                    </div>\r\n                    <div className=\"col-xs-4 col-sm-4 mb4 mt-2\">\r\n                        <button className={\"btn btn-danger btn-block\"}\r\n                                onClick={() => SpeechRecognition.stopListening()}\r\n                                style={{borderTopLeftRadius:\"0\",borderBottomLeftRadius:\"0\"}}\r\n                        >\r\n                            Arreter\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <DialogMeteo />\r\n        </>\r\n    );\r\n};\r\n","C:\\Projet\\haum-project\\src\\components\\info\\Projectinfo.jsx",[],"C:\\Projet\\haum-project\\src\\components\\DialogMeteo.jsx",["55"],"import React, { useContext, useRef } from \"react\";\r\nimport { DialogContext } from \"../DialogContext\";\r\nimport { AnimatePresence, motion } from \"framer-motion\";\r\nimport { css } from \"@emotion/css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\"\r\nimport { ActionButton, ActionButtonList } from \"./ActionButton.jsx\";\r\n\r\nconst DialogMeteo = ({ children }) => {\r\n    const {\r\n        city,\r\n        getMeteo,\r\n        askForMeteo,\r\n        closeMeteo,\r\n        meteoDialog,\r\n        sendRequest,\r\n    } = useContext(DialogContext);\r\n\r\n    const sinp = useRef(null);\r\n\r\n    const searchForMeteo = () => {\r\n        const city = sinp.current.value;\r\n        getMeteo();\r\n        closeMeteo();\r\n    };\r\n    return (\r\n        <>\r\n            <ActionButtonList>\r\n                {!meteoDialog ? (\r\n                    <ActionButton onClick={askForMeteo}>\r\n                        Chercher la m&eacute;t&eacute;o à ...\r\n                    </ActionButton>\r\n                ) : (\r\n                    <ActionButton onClick={closeMeteo}>\r\n                        Fermer la m&eacute;t&eacute;o\r\n                    </ActionButton>\r\n                )}\r\n            </ActionButtonList>\r\n            <AnimatePresence>\r\n                <ActionButtonList>\r\n                    {meteoDialog &&\r\n                        city.map((value, index) => (\r\n                            <ActionButton\r\n                                key={\"meteo-city-\" + index}\r\n                                onClick={() => {\r\n                                    sendRequest(\r\n                                        `Je voudrais savoir la météo à ${value}`\r\n                                    );\r\n                                    getMeteo(value);\r\n                                }}\r\n                            >\r\n                                {value}\r\n                            </ActionButton>\r\n                        ))}\r\n                </ActionButtonList>\r\n                {meteoDialog && (\r\n                    <motion.div\r\n                        exit={{ opacity: 0, x: -30 }}\r\n                        initial={{ opacity: 0, x: 80 }}\r\n                        animate={{ opacity: 1, x: 0 }}\r\n                        key={\"input-city\"}\r\n                        className={css({ margin: 10 })}\r\n                    >\r\n                        <input\r\n                            className={\"form-control\"}\r\n                            type=\"text\"\r\n                            ref={sinp}\r\n                            placeholder=\"Ville (Nom d'origine ex:Antananrivo,London,Toamasina) \"\r\n                        />\r\n                        <button className={\"btn btn-info mt-3\"} onClick={searchForMeteo}>Chercher</button>\r\n                    </motion.div>\r\n                )}\r\n            </AnimatePresence>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default DialogMeteo;\r\n","C:\\Projet\\haum-project\\src\\components\\ActionButton.jsx",[],"C:\\Projet\\haum-project\\src\\components\\animation.js",[],["56","57"],{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","severity":1,"message":"63","line":2,"column":10,"nodeType":"64","messageId":"65","endLine":2,"endColumn":25},{"ruleId":"62","severity":1,"message":"66","line":2,"column":9,"nodeType":"64","messageId":"65","endLine":2,"endColumn":12},{"ruleId":"67","severity":1,"message":"68","line":28,"column":23,"nodeType":"69","endLine":28,"endColumn":33},{"ruleId":"62","severity":1,"message":"70","line":66,"column":15,"nodeType":"64","messageId":"65","endLine":66,"endColumn":18},{"ruleId":"67","severity":1,"message":"71","line":69,"column":7,"nodeType":"72","endLine":69,"endColumn":24,"suggestions":"73"},{"ruleId":"62","severity":1,"message":"74","line":21,"column":15,"nodeType":"64","messageId":"65","endLine":21,"endColumn":19},{"ruleId":"58","replacedBy":"75"},{"ruleId":"60","replacedBy":"76"},"no-native-reassign",["77"],"no-negated-in-lhs",["78"],"no-unused-vars","'getMeteoForCity' is defined but never used.","Identifier","unusedVar","'css' is defined but never used.","react-hooks/exhaustive-deps","Assignments to the 'newDate' variable from inside React Hook useLayoutEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useLayoutEffect.","NewExpression","'msg' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'sendRequest'. Either include it or remove the dependency array.","ArrayExpression",["79"],"'city' is assigned a value but never used.",["77"],["78"],"no-global-assign","no-unsafe-negation",{"desc":"80","fix":"81"},"Update the dependencies array to be: [finalTranscript, sendRequest]",{"range":"82","text":"83"},[2181,2198],"[finalTranscript, sendRequest]"]